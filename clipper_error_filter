#!/usr/bin/ruby
# --------------------------------------------------
# Sigma-com software
# ernad.husremovic@sigma-com.net
# 01.16, 25.05.06
# --------------------------------------------------


SEPARATOR=":"

class ClipperErrorFilter

    attr_reader :error_filter

    def initialize
       @test = false
       @blinker_search_fions="1"
       @blinker_search_ext="1"
    end

    def dos_to_unix(fname)
       tmp = fname.gsub('c:\\dev\\', ENV['SC_BUILD_HOME_DIR'] + '/')
       tmp = tmp.gsub('\\', '/')
       #pretpostavlja se da je  filename malim slovima !
       tmp2 = File.dirname(tmp)
       tmp2 += '/'  if not tmp2.empty?
       tmp2 += File.basename(tmp).downcase
       return tmp2
    end
    
    def catch_compiler_message(line)
      #                     1                   2                 3 
      re = Regexp.new('^([0-9_A-Za-z\/\.\\\\:]*)\((\d+)\)\s+Error\s+([0-9_A-Za-z\/\s]+)')
      #match definition object
      md = re.match(line)
      if (md != nil) and (md.size>0)
       #puts "nasao sam clipper poruku !" if @test
       #filename
       @err_line = ""
       @err_line += self.dos_to_unix(md[1])
       #line number
       @err_line += SEPARATOR + md[2]
       @err_line += SEPARATOR + "CLIPPER - " + md[3].chomp
       self.out
      end
    end

    def catch_blinker_message(line)
      #                                 1                                 2                     3              4
      #                BLINKER   :    1115   :     REQUEST.OBJ        ( REQUEST  )     :    '  BOF  '   :    unresolved external"
      re = Regexp.new('BLINKER\s+:\s+(\d+)\s+:\s+([0-9_A-Za-z\/\.\\\\:]+)\s*\(([0_9A-Za-z_]+)\)\s*:\s*\'(.*)\'\s+:\s+(.*)')
      #puts re
      #match definition object
      md = re.match(line)
      if md != nil
       #puts "nasao sam blinker poruku !" if @test
       #filename
       # 1115 - broj blinker greske md[1]
       # ime obj fajla - request.obj md[2]
       # ime modula - REQUEST md[3]
       # ime funkcije md[4]
       refs = find_reference(md[4])
       if refs.empty?
           @err_line = "thisfile"
	   @err_line += SEPARATOR + "0"
	   @err_line += md[0]
	   self.out
	   return
       end
       # refs je string "./test.prg:9:function bof()\n./db/test2.prg:22:function bof()
       arefs = refs.split(/[\r\n]/)
       arefs.each  do |line_ref|
         #                     1       2       3
         #primjer output-a: ./test.prg:2:external bof
	 re = Regexp.new('([A-Za-z\/\.\\\\:]+):(\d+):(.*)')
	 mdref = re.match(line_ref)
         @err_line = ""
	 if mdref != nil
		 @err_line += mdref[1]
		 @err_line += SEPARATOR + mdref[2]
		 @err_line += SEPARATOR + "BLINKER - " + mdref[3]
       		 self.out
         end
        end
      end
    end

    #get options from master make process
    def get_options(line)
        re=Regexp.new('BLINKER_SEARCH_EXT=(\d)')
        md=re.match(line)
	if md != nil
		@blinker_search_ext=md[1]
	end

        re=Regexp.new('BLINKER_SEARCH_FIONS=(\d)')
	md=re.match(line)
	if md != nil
		@blinker_search_fions=md[1]
	end

    end

    #procesiraj ulaz: handle clipper, blinker error messages
    def process_stdin

	if @test
	  f_in=[]
	  f_in << "test/testfilename.prg(100) Error C200 message"
	  f_in << "c:\\dev\\test\\testfilename.prg(122) Error C23 message"
          f_in << "BLINKER : 1115 : REQUEST.OBJ(REQUEST) : 'BOF' : unresolved external"
          f_in << "BLINKER : 1115 : REQUEST.OBJ(REQUEST) : 'PROW' : unresolved external"
          for i in 1..10
	        puts
	  end
	  puts "="*40
        else
	  f_in=STDIN
	end


	f_in.each_line do |line|
	#f_in.each do |line|
	   get_options(line)
	   catch_compiler_message(line)
           catch_blinker_message(line)   
	end
	
    end

    def find_reference(func_name)
      #fnd surfa po poddirektorijumima
      #cmd = 'fnd "'+func_name+'\s*\(.*\)|extern.*\s+'+func_name+'\s*$" "*.prg"'
      #mi medjutim blinker greske lovimo samo u tekucem direktoriju

      if @blinker_search_fions=="0" and @blinker_search_ext=="0"
         return ""
      end
      
      cmd = 'grep -i -n -H -E "'
      first = TRUE
      if @blinker_search_fions == "1"
        cmd += func_name+'\s*\(.*\)'
	first = FALSE
      end
      if @blinker_search_ext == "1"
        if !first
	   cmd += '|'
	end
        cmd += 'extern.*\s+'+func_name+'\s*$"'
      end
      cmd += ' *.prg'
      #puts "echo search blinker fions: _#{@blinker_search_fions}_  ext: _#{@blinker_search_ext}_"
      a = Kernel.`(cmd)
      #lista linija gdje se pojavljuje poziv funkcije ili external funkcije
      return a
    end

    def out
       STDOUT.puts @err_line
    end
end

filter = ClipperErrorFilter.new
filter.process_stdin
